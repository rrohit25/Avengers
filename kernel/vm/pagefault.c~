#include "types.h"
#include "globals.h"
#include "kernel.h"
#include "errno.h"

#include "util/debug.h"

#include "proc/proc.h"

#include "mm/mm.h"
#include "mm/mman.h"
#include "mm/page.h"
#include "mm/mmobj.h"
#include "mm/pframe.h"
#include "mm/pagetable.h"

#include "vm/pagefault.h"
#include "vm/vmmap.h"

/*
 * This gets called by _pt_fault_handler in mm/pagetable.c The
 * calling function has already done a lot of error checking for
 * us. In particular it has checked that we are not page faulting
 * while in kernel mode. Make sure you understand why an
 * unexpected page fault in kernel mode is bad in Weenix. You
 * should probably read the _pt_fault_handler function to get a
 * sense of what it is doing.
 *
 * Before you can do anything you need to find the vmarea that
 * contains the address that was faulted on. Make sure to check
 * the permissions on the area to see if the process has
 * permission to do [cause]. If either of these checks does not
 * pass kill the offending process, setting its exit status to
 * EFAULT (normally we would send the SIGSEGV signal, however
 * Weenix does not support signals).
 *
 * Now it is time to find the correct page (don't forget
 * about shadow objects, especially copy-on-write magic!). Make
 * sure that if the user writes to the page it will be handled
 * correctly.
 *
 * Finally call pt_map to have the new mapping placed into the
 * appropriate page table.
 *
 * @param vaddr the address that was accessed to cause the fault
 *
 * @param cause this is the type of operation on the memory
 *              address which caused the fault, possible values
 *              can be found in pagefault.h
 */
void
handle_pagefault(uintptr_t vaddr, uint32_t cause)
{
        /*NOT_YET_IMPLEMENTED("VM:_done_doubt handle_pagefault");*/
        /**/
        dbg(DBG_ELF, "Hello pagefault\n");
        dbg(DBG_ELF, "pagefault bug pos1\n");
        vmarea_t* vma = 
                vmmap_lookup(curproc->p_vmmap, ADDR_TO_PN(vaddr));
        int err = 0;
        dbg(DBG_ELF, "pagefault bug pos1.2\n");
        if (vma->vma_prot == PROT_NONE)
                err = -1;
        if ( ((cause&FAULT_WRITE) != 0) && ((vma->vma_prot&PROT_WRITE)==0) )
                err = -1;
        if ( ((cause&FAULT_EXEC)!= 0) && ((vma->vma_prot&PROT_EXEC)==0) )
                err = -1;
        dbg(DBG_ELF, "pagefault bug pos2\n");
        if (err < 0)
                proc_kill( curproc, EFAULT );
        else
        {
                int forwrite = -1;
                uint32_t pdflags = 0;
                uint32_t ptflags = 0;
                pdflags |= PD_USER;
                ptflags |= PT_USER;

                if ( (cause&FAULT_PRESENT) == FAULT_PRESENT )
                {
                        dbg(DBG_ELF, "set present\n");
                        pdflags |= PD_PRESENT;
                        ptflags |= PT_PRESENT;
                } /* end if */

                dbg(DBG_ELF, "pagefault bug pos3\n");
                
                if ( (cause&FAULT_WRITE) == FAULT_WRITE )
                {
                        dbg(DBG_ELF, "set write\n");
                        pdflags |= PD_WRITE;
                        ptflags |= PT_WRITE;
                } /* end if */
        
                dbg(DBG_ELF, "pagefault bug pos4\n");
                if ((cause&FAULT_WRITE) == FAULT_WRITE)
                        forwrite = 1;
                else 
                        forwrite = 0;
                uint32_t pagenum = ADDR_TO_PN( vaddr );
                pframe_t* pf;
                dbg(DBG_S5FS, "obj %p, pagenum %d\n", vma->vma_obj, pagenum);


                pframe_lookup(vma->vma_obj,pagenum, forwrite, &pf);
                
                KASSERT(pf != NULL);
                dbg(DBG_ELF, "pagefault bug pos5, pf %p\n", pf);
                /*dbg(DBG_PROC, "vaddr %d, pf->pf_addr %d\n", vaddr, pf->pf_addr);*/
                int ret = pt_map(curproc->p_pagedir,PAGE_ALIGN_DOWN(vaddr),
                        PAGE_ALIGN_DOWN(pf->pf_addr),pdflags,ptflags);
                dbg(DBG_PROC, "ret %d\n",  ret);
                KASSERT(NULL);
        } /* end else */
        dbg(DBG_ELF, "\npagefault bug posn\n");
        /**/
}

